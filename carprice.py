# -*- coding: utf-8 -*-
"""Carprice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1efI5R0AWKayncGMeHJQPZ7V6AVXCm5Ar
"""

import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load dataset (New Working URL)
url = "https://raw.githubusercontent.com/amankharwal/Website-data/master/CarPrice.csv"
df = pd.read_csv(url)

# Check dataset
print(df.head())

# Encode categorical columns
label_encoders = {}
for column in ['CarName', 'fueltype', 'aspiration', 'doornumber', 'carbody',
               'drivewheel', 'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem']:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le  # Store encoders if needed later

# Split features and target
X = df.drop(columns=['price']).values  # Features
y = df['price'].values  # Target (price)

# Normalize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define ANN model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(16, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(1)  # Regression output (no activation)
])

# Compile and train model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])
model.fit(X_train, y_train, epochs=50, batch_size=10, validation_data=(X_test, y_test))

# Evaluate model
loss, mae = model.evaluate(X_test, y_test)
print(f"Test MAE: {mae:.2f}")  # Mean Absolute Error